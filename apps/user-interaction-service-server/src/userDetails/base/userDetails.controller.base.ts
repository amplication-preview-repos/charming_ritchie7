/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserDetailsService } from "../userDetails.service";
import { UserDetailsCreateInput } from "./UserDetailsCreateInput";
import { UserDetails } from "./UserDetails";
import { UserDetailsFindManyArgs } from "./UserDetailsFindManyArgs";
import { UserDetailsWhereUniqueInput } from "./UserDetailsWhereUniqueInput";
import { UserDetailsUpdateInput } from "./UserDetailsUpdateInput";

export class UserDetailsControllerBase {
  constructor(protected readonly service: UserDetailsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserDetails })
  async createUserDetails(
    @common.Body() data: UserDetailsCreateInput
  ): Promise<UserDetails> {
    return await this.service.createUserDetails({
      data: data,
      select: {
        address: true,
        contactInformation: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserDetails] })
  @ApiNestedQuery(UserDetailsFindManyArgs)
  async userDetailsItems(
    @common.Req() request: Request
  ): Promise<UserDetails[]> {
    const args = plainToClass(UserDetailsFindManyArgs, request.query);
    return this.service.userDetailsItems({
      ...args,
      select: {
        address: true,
        contactInformation: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userDetails(
    @common.Param() params: UserDetailsWhereUniqueInput
  ): Promise<UserDetails | null> {
    const result = await this.service.userDetails({
      where: params,
      select: {
        address: true,
        contactInformation: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserDetails(
    @common.Param() params: UserDetailsWhereUniqueInput,
    @common.Body() data: UserDetailsUpdateInput
  ): Promise<UserDetails | null> {
    try {
      return await this.service.updateUserDetails({
        where: params,
        data: data,
        select: {
          address: true,
          contactInformation: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserDetails(
    @common.Param() params: UserDetailsWhereUniqueInput
  ): Promise<UserDetails | null> {
    try {
      return await this.service.deleteUserDetails({
        where: params,
        select: {
          address: true,
          contactInformation: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
