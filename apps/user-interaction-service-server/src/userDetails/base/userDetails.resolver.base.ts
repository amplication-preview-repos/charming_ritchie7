/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserDetails } from "./UserDetails";
import { UserDetailsCountArgs } from "./UserDetailsCountArgs";
import { UserDetailsFindManyArgs } from "./UserDetailsFindManyArgs";
import { UserDetailsFindUniqueArgs } from "./UserDetailsFindUniqueArgs";
import { CreateUserDetailsArgs } from "./CreateUserDetailsArgs";
import { UpdateUserDetailsArgs } from "./UpdateUserDetailsArgs";
import { DeleteUserDetailsArgs } from "./DeleteUserDetailsArgs";
import { UserDetailsService } from "../userDetails.service";
@graphql.Resolver(() => UserDetails)
export class UserDetailsResolverBase {
  constructor(protected readonly service: UserDetailsService) {}

  async _userDetailsItemsMeta(
    @graphql.Args() args: UserDetailsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserDetails])
  async userDetailsItems(
    @graphql.Args() args: UserDetailsFindManyArgs
  ): Promise<UserDetails[]> {
    return this.service.userDetailsItems(args);
  }

  @graphql.Query(() => UserDetails, { nullable: true })
  async userDetails(
    @graphql.Args() args: UserDetailsFindUniqueArgs
  ): Promise<UserDetails | null> {
    const result = await this.service.userDetails(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserDetails)
  async createUserDetails(
    @graphql.Args() args: CreateUserDetailsArgs
  ): Promise<UserDetails> {
    return await this.service.createUserDetails({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserDetails)
  async updateUserDetails(
    @graphql.Args() args: UpdateUserDetailsArgs
  ): Promise<UserDetails | null> {
    try {
      return await this.service.updateUserDetails({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserDetails)
  async deleteUserDetails(
    @graphql.Args() args: DeleteUserDetailsArgs
  ): Promise<UserDetails | null> {
    try {
      return await this.service.deleteUserDetails(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
