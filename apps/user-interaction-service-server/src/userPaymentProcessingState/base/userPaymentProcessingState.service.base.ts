/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserPaymentProcessingState as PrismaUserPaymentProcessingState,
} from "@prisma/client";

export class UserPaymentProcessingStateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserPaymentProcessingStateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userPaymentProcessingState.count(args);
  }

  async userPaymentProcessingStates(
    args: Prisma.UserPaymentProcessingStateFindManyArgs
  ): Promise<PrismaUserPaymentProcessingState[]> {
    return this.prisma.userPaymentProcessingState.findMany(args);
  }
  async userPaymentProcessingState(
    args: Prisma.UserPaymentProcessingStateFindUniqueArgs
  ): Promise<PrismaUserPaymentProcessingState | null> {
    return this.prisma.userPaymentProcessingState.findUnique(args);
  }
  async createUserPaymentProcessingState(
    args: Prisma.UserPaymentProcessingStateCreateArgs
  ): Promise<PrismaUserPaymentProcessingState> {
    return this.prisma.userPaymentProcessingState.create(args);
  }
  async updateUserPaymentProcessingState(
    args: Prisma.UserPaymentProcessingStateUpdateArgs
  ): Promise<PrismaUserPaymentProcessingState> {
    return this.prisma.userPaymentProcessingState.update(args);
  }
  async deleteUserPaymentProcessingState(
    args: Prisma.UserPaymentProcessingStateDeleteArgs
  ): Promise<PrismaUserPaymentProcessingState> {
    return this.prisma.userPaymentProcessingState.delete(args);
  }
}
