/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserPaymentProcessingStateService } from "../userPaymentProcessingState.service";
import { UserPaymentProcessingStateCreateInput } from "./UserPaymentProcessingStateCreateInput";
import { UserPaymentProcessingState } from "./UserPaymentProcessingState";
import { UserPaymentProcessingStateFindManyArgs } from "./UserPaymentProcessingStateFindManyArgs";
import { UserPaymentProcessingStateWhereUniqueInput } from "./UserPaymentProcessingStateWhereUniqueInput";
import { UserPaymentProcessingStateUpdateInput } from "./UserPaymentProcessingStateUpdateInput";

export class UserPaymentProcessingStateControllerBase {
  constructor(protected readonly service: UserPaymentProcessingStateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserPaymentProcessingState })
  async createUserPaymentProcessingState(
    @common.Body() data: UserPaymentProcessingStateCreateInput
  ): Promise<UserPaymentProcessingState> {
    return await this.service.createUserPaymentProcessingState({
      data: data,
      select: {
        createdAt: true,
        id: true,
        state: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserPaymentProcessingState] })
  @ApiNestedQuery(UserPaymentProcessingStateFindManyArgs)
  async userPaymentProcessingStates(
    @common.Req() request: Request
  ): Promise<UserPaymentProcessingState[]> {
    const args = plainToClass(
      UserPaymentProcessingStateFindManyArgs,
      request.query
    );
    return this.service.userPaymentProcessingStates({
      ...args,
      select: {
        createdAt: true,
        id: true,
        state: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserPaymentProcessingState })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userPaymentProcessingState(
    @common.Param() params: UserPaymentProcessingStateWhereUniqueInput
  ): Promise<UserPaymentProcessingState | null> {
    const result = await this.service.userPaymentProcessingState({
      where: params,
      select: {
        createdAt: true,
        id: true,
        state: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserPaymentProcessingState })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserPaymentProcessingState(
    @common.Param() params: UserPaymentProcessingStateWhereUniqueInput,
    @common.Body() data: UserPaymentProcessingStateUpdateInput
  ): Promise<UserPaymentProcessingState | null> {
    try {
      return await this.service.updateUserPaymentProcessingState({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          state: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserPaymentProcessingState })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserPaymentProcessingState(
    @common.Param() params: UserPaymentProcessingStateWhereUniqueInput
  ): Promise<UserPaymentProcessingState | null> {
    try {
      return await this.service.deleteUserPaymentProcessingState({
        where: params,
        select: {
          createdAt: true,
          id: true,
          state: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
