/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserPaymentProcessingState } from "./UserPaymentProcessingState";
import { UserPaymentProcessingStateCountArgs } from "./UserPaymentProcessingStateCountArgs";
import { UserPaymentProcessingStateFindManyArgs } from "./UserPaymentProcessingStateFindManyArgs";
import { UserPaymentProcessingStateFindUniqueArgs } from "./UserPaymentProcessingStateFindUniqueArgs";
import { CreateUserPaymentProcessingStateArgs } from "./CreateUserPaymentProcessingStateArgs";
import { UpdateUserPaymentProcessingStateArgs } from "./UpdateUserPaymentProcessingStateArgs";
import { DeleteUserPaymentProcessingStateArgs } from "./DeleteUserPaymentProcessingStateArgs";
import { UserPaymentProcessingStateService } from "../userPaymentProcessingState.service";
@graphql.Resolver(() => UserPaymentProcessingState)
export class UserPaymentProcessingStateResolverBase {
  constructor(protected readonly service: UserPaymentProcessingStateService) {}

  async _userPaymentProcessingStatesMeta(
    @graphql.Args() args: UserPaymentProcessingStateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserPaymentProcessingState])
  async userPaymentProcessingStates(
    @graphql.Args() args: UserPaymentProcessingStateFindManyArgs
  ): Promise<UserPaymentProcessingState[]> {
    return this.service.userPaymentProcessingStates(args);
  }

  @graphql.Query(() => UserPaymentProcessingState, { nullable: true })
  async userPaymentProcessingState(
    @graphql.Args() args: UserPaymentProcessingStateFindUniqueArgs
  ): Promise<UserPaymentProcessingState | null> {
    const result = await this.service.userPaymentProcessingState(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserPaymentProcessingState)
  async createUserPaymentProcessingState(
    @graphql.Args() args: CreateUserPaymentProcessingStateArgs
  ): Promise<UserPaymentProcessingState> {
    return await this.service.createUserPaymentProcessingState({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserPaymentProcessingState)
  async updateUserPaymentProcessingState(
    @graphql.Args() args: UpdateUserPaymentProcessingStateArgs
  ): Promise<UserPaymentProcessingState | null> {
    try {
      return await this.service.updateUserPaymentProcessingState({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserPaymentProcessingState)
  async deleteUserPaymentProcessingState(
    @graphql.Args() args: DeleteUserPaymentProcessingStateArgs
  ): Promise<UserPaymentProcessingState | null> {
    try {
      return await this.service.deleteUserPaymentProcessingState(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
