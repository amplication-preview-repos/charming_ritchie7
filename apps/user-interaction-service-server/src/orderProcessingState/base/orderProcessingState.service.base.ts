/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  OrderProcessingState as PrismaOrderProcessingState,
} from "@prisma/client";

export class OrderProcessingStateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OrderProcessingStateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.orderProcessingState.count(args);
  }

  async orderProcessingStates(
    args: Prisma.OrderProcessingStateFindManyArgs
  ): Promise<PrismaOrderProcessingState[]> {
    return this.prisma.orderProcessingState.findMany(args);
  }
  async orderProcessingState(
    args: Prisma.OrderProcessingStateFindUniqueArgs
  ): Promise<PrismaOrderProcessingState | null> {
    return this.prisma.orderProcessingState.findUnique(args);
  }
  async createOrderProcessingState(
    args: Prisma.OrderProcessingStateCreateArgs
  ): Promise<PrismaOrderProcessingState> {
    return this.prisma.orderProcessingState.create(args);
  }
  async updateOrderProcessingState(
    args: Prisma.OrderProcessingStateUpdateArgs
  ): Promise<PrismaOrderProcessingState> {
    return this.prisma.orderProcessingState.update(args);
  }
  async deleteOrderProcessingState(
    args: Prisma.OrderProcessingStateDeleteArgs
  ): Promise<PrismaOrderProcessingState> {
    return this.prisma.orderProcessingState.delete(args);
  }
}
