/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OrderProcessingStateService } from "../orderProcessingState.service";
import { OrderProcessingStateCreateInput } from "./OrderProcessingStateCreateInput";
import { OrderProcessingState } from "./OrderProcessingState";
import { OrderProcessingStateFindManyArgs } from "./OrderProcessingStateFindManyArgs";
import { OrderProcessingStateWhereUniqueInput } from "./OrderProcessingStateWhereUniqueInput";
import { OrderProcessingStateUpdateInput } from "./OrderProcessingStateUpdateInput";

export class OrderProcessingStateControllerBase {
  constructor(protected readonly service: OrderProcessingStateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OrderProcessingState })
  async createOrderProcessingState(
    @common.Body() data: OrderProcessingStateCreateInput
  ): Promise<OrderProcessingState> {
    return await this.service.createOrderProcessingState({
      data: data,
      select: {
        createdAt: true,
        id: true,
        state: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OrderProcessingState] })
  @ApiNestedQuery(OrderProcessingStateFindManyArgs)
  async orderProcessingStates(
    @common.Req() request: Request
  ): Promise<OrderProcessingState[]> {
    const args = plainToClass(OrderProcessingStateFindManyArgs, request.query);
    return this.service.orderProcessingStates({
      ...args,
      select: {
        createdAt: true,
        id: true,
        state: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OrderProcessingState })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async orderProcessingState(
    @common.Param() params: OrderProcessingStateWhereUniqueInput
  ): Promise<OrderProcessingState | null> {
    const result = await this.service.orderProcessingState({
      where: params,
      select: {
        createdAt: true,
        id: true,
        state: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OrderProcessingState })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOrderProcessingState(
    @common.Param() params: OrderProcessingStateWhereUniqueInput,
    @common.Body() data: OrderProcessingStateUpdateInput
  ): Promise<OrderProcessingState | null> {
    try {
      return await this.service.updateOrderProcessingState({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          state: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OrderProcessingState })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOrderProcessingState(
    @common.Param() params: OrderProcessingStateWhereUniqueInput
  ): Promise<OrderProcessingState | null> {
    try {
      return await this.service.deleteOrderProcessingState({
        where: params,
        select: {
          createdAt: true,
          id: true,
          state: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
